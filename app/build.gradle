apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'androidx.navigation.safeargs'
apply plugin: 'jacoco'

def okHttpVersion = '4.2.2'
def retrofitVersion = '2.6.2'
def coroutineVersion = '1.3.2'
def espressoVersion = '3.2.0'
def lifecycle_version = '2.2.0-rc03'

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.2"

    defaultConfig {
        applicationId "com.example.studentandroidapp"
        minSdkVersion 24
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            testCoverageEnabled true
        }
    }

// To inline the bytecode built with JVM target 1.8 into
// bytecode that is being built with JVM target 1.6. (e.g. navArgs)
    testOptions {
        unitTests.all {
            testLogging {
                events 'passed','failed','skipped'
            }
            jacoco {
                includeNoLocationClasses = true
            }
            unitTests.returnDefaultValues = true
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = "1.8"
    }

}
jacoco {
    toolVersion = "0.8.5"
}

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest']) {

    group = "Reporting"
    description = "Generate Jacoco coverage reports for Debug build"

    reports {
        xml.enabled = true
        html.enabled = true
    }

    def excludes = [
            '**/R.class',
            '**/R$*.class',
            '**/BuildConfig.*',
            '**/Manifest*.*',
            '**/*Test*.*',
            'android/**/*.*'
    ]
    def debugTree = fileTree(
            dir: "${buildDir}/intermediates/javac/debug", excludes: excludes)
    def kotlinDebugTree = fileTree(
            dir: "$buildDir/tmp/kotlin-classes/debug",
            excludes: excludes)
    def mainSrc = "${project.projectDir}/src/main/java"

    sourceDirectories = files([mainSrc])
    classDirectories = files([debugTree],[kotlinDebugTree])
    executionData = fileTree("$buildDir/jacoco/testDebugUnitTest.exec")
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    //These libraries are for networking
    implementation "com.squareup.okhttp3:okhttp:${okHttpVersion}"
    implementation "com.squareup.retrofit2:retrofit:${retrofitVersion}"
    implementation "com.squareup.retrofit2:converter-gson:${retrofitVersion}"
    //This enables RxJava on the project
    implementation "com.squareup.retrofit2:adapter-rxjava2:${retrofitVersion}"
    implementation 'io.reactivex.rxjava2:rxjava:2.2.16'
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'
    //This enables the use of coroutines on the project
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:${coroutineVersion}"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:${coroutineVersion}"

    //This is for viewmodel and livedata lifecycles
    implementation "androidx.lifecycle:lifecycle-extensions:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-common-java8:$lifecycle_version"

    //Gson to serialize and deserialize objects from and to json
    implementation 'com.google.code.gson:gson:2.8.6'

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.core:core-ktx:1.1.0'
    implementation 'com.google.android.material:material:1.0.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'androidx.navigation:navigation-fragment-ktx:2.1.0'
    implementation 'androidx.navigation:navigation-ui-ktx:2.1.0'
    //idling resources for espresso tests
    implementation "androidx.test.espresso:espresso-idling-resource:${espressoVersion}"

    //unit test dependencies including mockito
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.mockito:mockito-all:2.0.2-beta'
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:${coroutineVersion}"

    //UI test dependencies including mockwebserver
    androidTestImplementation "com.squareup.okhttp3:mockwebserver:${okHttpVersion}"
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation "androidx.test.espresso:espresso-core:${espressoVersion}"
    androidTestImplementation "androidx.test.espresso:espresso-intents:${espressoVersion}"
    androidTestImplementation "androidx.test:runner:1.2.0"
    androidTestImplementation "androidx.test:rules:1.2.0"

}

androidExtensions {
    experimental = true
}